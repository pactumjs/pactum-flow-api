swagger: "2.0"
info:
  version: "1.0.0"
  title: "Pactum Flow API"
basePath: "/api/flow/v1"
consumes:
  - "application/json"
  - "text/html"
produces:
  - "application/json"
  - "text/html"
  - "text/plain"
paths:
  /health:
    get:
      tags:
        - "HealthCheck"
      description: "check health"
      operationId: "getHealth"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/HealthResponse"
    x-swagger-router-controller: "health.controller"
  /projects:
    get:
      tags:
        - "Project"
      description: "get projects"
      operationId: "getProjects"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "query"
          name: "key"
          description: "key of the project to fetch"
          type: "string"
        - in: "query"
          name: "name"
          description: "name of the project to fetch"
          type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/HealthResponse"
    post:
      tags:
        - "Project"
      description: "create a new project"
      operationId: "postProject"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
      parameters:
        - in: "body"
          name: "project"
          description: "project to create"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Project"
    x-swagger-router-controller: "project.controller"
  /projects/{id}:
    get:
      tags:
        - "Project"
      description: "get project with id"
      operationId: "getProject"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "project id to fetch"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Project"
    delete:
      tags:
        - "Project"
      description: "delete a project"
      operationId: "deleteProject"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
      parameters:
        - in: "path"
          name: "id"
          description: "project id to delete"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/HealthResponse"
    x-swagger-router-controller: "project.controller"
  /analyses:
    get:
      tags:
        - "Analyses"
      description: "get analyses"
      operationId: "getAnalyses"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "query"
          name: "projectId"
          description: "id of the project to fetch"
          type: "string"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Analyses"
    post:
      tags:
        - "Analyses"
      description: "create a new analysis"
      operationId: "postAnalysis"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
      parameters:
        - in: "body"
          name: "analysis"
          description: "analysis to create"
          required: true
          schema:
            $ref: "#/definitions/Analysis"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Analysis"
    x-swagger-router-controller: "analysis.controller"
  /analyses/{id}:
    get:
      tags:
        - "Analyses"
      description: "get analysis with id"
      operationId: "getAnalysisById"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "analysis id to fetch"
          required: true
          type: "string"
          minLength: 24
          maxLength: 24
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Analysis"
    delete:
      tags:
        - "Analyses"
      description: "delete an analysis"
      operationId: "deleteAnalysis"
      security:
        - SessionToken: []
      parameters:
        - in: "path"
          name: "id"
          description: "analysis id to delete"
          required: true
          type: "string"
          minLength: 24
          maxLength: 24
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/HealthResponse"
    x-swagger-router-controller: "analysis.controller"
  /interactions:
    get:
      tags:
        - "Interactions"
      description: "get interactions"
      operationId: "getInteractions"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "query"
          name: "analysisId"
          description: "id of the analysis"
          type: "string"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Interaction"
    post:
      tags:
        - "Interactions"
      description: "create a new interaction"
      operationId: "postInteractions"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
      parameters:
        - in: "body"
          name: "interactions"
          description: "interactions to create"
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Interaction"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Interaction"
    x-swagger-router-controller: "interaction.controller"
  /interactions/{id}:
    get:
      tags:
        - "Interactions"
      description: "get interaction with id"
      operationId: "getInteractionById"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "interaction id to fetch"
          required: true
          type: "string"
          minLength: 24
          maxLength: 24
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Interaction"
    x-swagger-router-controller: "interaction.controller"
  /flows:
    get:
      tags:
        - "Flows"
      description: "get flows"
      operationId: "getFlows"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "query"
          name: "analysisId"
          description: "analysis id of the flows to fetch"
          type: "string"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Flow"
    post:
      tags:
        - "Flows"
      description: "create a new flows"
      operationId: "postFlows"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
      parameters:
        - in: "body"
          name: "flow"
          description: "flow to create"
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Flow"
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Flow"
    x-swagger-router-controller: "flow.controller"
  /flows/{id}:
    get:
      tags:
        - "Flows"
      description: "get flow with id"
      operationId: "getFlow"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "flow id to fetch"
          required: true
          type: "string"
          minLength: 24
          maxLength: 24
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Flow"
    x-swagger-router-controller: "flow.controller"
  /metrics/analyses/{id}:
    get:
      tags:
        - "Metrics"
      description: "get analysis metrics"
      operationId: "getAnalysisMetrics"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "analysis id to fetch"
          required: true
          type: "string"
          minLength: 24
          maxLength: 24
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/HealthResponse"
    x-swagger-router-controller: "metric.controller"
  /process/analysis:
    post:
      tags:
        - "Process"
      description: "process analysis"
      operationId: "postProcessAnalysis"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
      parameters:
        - in: "body"
          name: "process body"
          description: "analysis to process"
          required: true
          schema:
            $ref: "#/definitions/ProcessAnalysis"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/HealthResponse"
    x-swagger-router-controller: "processor.controller"
  /jobs:
    get:
      tags:
        - "Jobs"
      description: "get jobs"
      operationId: "getJobs"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Job"
    x-swagger-router-controller: "job.controller"
  /jobs/{id}:
    get:
      tags:
        - "Jobs"
      description: "get job by id"
      operationId: "getJobById"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "job id to fetch"
          required: true
          type: "string"
          minLength: 24
          maxLength: 24
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Job"
    x-swagger-router-controller: "job.controller"
  /search/analyses:
    post:
      tags:
        - "Search"
      description: "search analyses"
      operationId: "postSearchAnalyses"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "body"
          name: "search"
          description: "search payload"
          required: true
          schema:
            $ref: "#/definitions/SearchIds"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Analyses"
    x-swagger-router-controller: "search.controller"
  /search/interactions:
    post:
      tags:
        - "Search"
      description: "search interactions"
      operationId: "postSearchInteractions"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "body"
          name: "search"
          description: "search payload"
          required: true
          schema:
            $ref: "#/definitions/SearchIds"
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Interaction"
    x-swagger-router-controller: "search.controller"
  /search/flows:
    post:
      tags:
        - "Search"
      description: "search flows"
      operationId: "postSearchFlows"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "body"
          name: "search"
          description: "search payload"
          required: true
          schema:
            $ref: "#/definitions/SearchIds"
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Flow"
    x-swagger-router-controller: "search.controller"
  /requests/{id}:
    get:
      tags:
        - "Exchanges"
      description: "get request with id"
      operationId: "getExchangeRequestById"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "request id to fetch"
          required: true
          type: "string"
          minLength: 24
          maxLength: 24
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/FlowRequest"
    x-swagger-router-controller: "exchange.controller"
  /responses/{id}:
    get:
      tags:
        - "Exchanges"
      description: "get response with id"
      operationId: "getExchangeResponseById"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "response id to fetch"
          required: true
          type: "string"
          minLength: 24
          maxLength: 24
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/FlowResponse"
    x-swagger-router-controller: "exchange.controller"
  /environments:
    get:
      tags:
        - "Environments"
      description: "get environments"
      operationId: "getEnvironments"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            type: 'array'
            items:
              $ref: "#/definitions/Environment"
    post:
      tags:
        - "Environments"
      description: "publish a version of project to a environment"
      operationId: "postEnvironment"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
      parameters:
        - in: "body"
          name: "environment"
          description: "project, version & environment to publish"
          required: true
          schema:
            $ref: "#/definitions/Environment"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Environment"
    x-swagger-router-controller: "environment.controller"
  /environments/{id}:
    get:
      tags:
        - "Environments"
      description: "get environment with id"
      operationId: "getEnvironment"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "path"
          name: "id"
          description: "environment name"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Environment"
    delete:
      tags:
        - "Environments"
      description: "delete an environment"
      operationId: "deleteEnvironment"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
      parameters:
        - in: "path"
          name: "id"
          description: "environment name"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/HealthResponse"
    x-swagger-router-controller: "environment.controller"
  /compatibility:
    get:
      tags:
        - "Compatibility"
      description: "get compatibility results by consumer & provider"
      operationId: "getCompatibilityResults"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "query"
          name: "consumer"
          description: "id of the consumer project"
          type: "string"
          required: true
        - in: "query"
          name: "consumerVersion"
          description: "version of the consumer project"
          type: "string"
          required: false
        - in: "query"
          name: "provider"
          description: "id of the provider project"
          type: "string"
          required: true
        - in: "query"
          name: "providerVersion"
          description: "version of the provider project"
          type: "string"
          required: false
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/CompatibilityResult"
    post:
      tags:
        - "Compatibility"
      description: "verify compatibility"
      operationId: "verifyCompatibility"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
      parameters:
        - in: "body"
          name: "verify"
          description: "project to verify"
          required: true
          schema:
            $ref: "#/definitions/Verify"
      responses:
        202:
          description: "Success"
          schema:
            $ref: "#/definitions/HealthResponse"
    x-swagger-router-controller: "compatibility.controller"
  /compatibility/project:
    get:
      tags:
        - "Compatibility"
      description: "get compatibility results by project"
      operationId: "getCompatibilityResultsByProject"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "query"
          name: "projectId"
          description: "id of the project to fetch"
          type: "string"
          required: true
        - in: "query"
          name: "version"
          description: "version of the project to fetch"
          type: "string"
          required: false
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/CompatibilityResult"
    x-swagger-router-controller: "compatibility.controller" 
  /compatibility/{id}:
    delete:
      tags:
        - "Compatibility"
      description: "delete compatibility results by project"
      operationId: "deleteCompatibilityResultsByProject"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
      parameters:
        - in: "path"
          name: "id"
          description: "id of the project to delete"
          type: "string"
          minLength: 2
          required: true
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/CompatibilityResult"
    x-swagger-router-controller: "compatibility.controller"
  /compatibility/{id}/version/{version}:
    delete:
      tags:
        - "Compatibility"
      description: "delete compatibility results by version"
      operationId: "deleteCompatibilityResultsByProjectVersion"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
      parameters:
        - in: "path"
          name: "id"
          description: "id of the project to delete"
          type: "string"
          minLength: 2
          required: true
        - in: "path"
          name: "version"
          description: "version of the project to delete"
          type: "string"
          minLength: 2
          required: true
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/CompatibilityResult"
    x-swagger-router-controller: "compatibility.controller"
  /compatibility/project/{id}/validate:
    post:
      tags:
        - "Compatibility"
      description: "validate compatibility of given flows and interactions"
      operationId: "validateCompatibilityOfFlowsAndInteractions"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
      parameters:
        - in: "path"
          name: "id"
          description: "id of the project"
          type: "string"
          minLength: 2
          required: true
        - in: "body"
          name: "payload"
          description: "flows and interactions to validate"
          required: true
          schema:
            $ref: "#/definitions/CompatibilityPayload"
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/HealthResponse"
    x-swagger-router-controller: "compatibility.controller"
  /quality-gate/status:
    get:
      tags:
        - "Quality Gate"
      description: "get quality gate status of a project"
      operationId: "getQualityGateStatus"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      parameters:
        - in: "query"
          name: "projectId"
          description: "id of the project"
          type: "string"
          required: true
        - in: "query"
          name: "version"
          description: "version of the project to fetch"
          type: "string"
          required: true
        - in: "query"
          name: "environment"
          description: "environment name"
          type: "string"
          required: false
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/QualityGateStatus"
    x-swagger-router-controller: "qualityGate.controller"
  /relations:
    get:
      tags:
        - "Relations"
      description: "get relations between projects"
      operationId: "getRelations"
      security:
        - SessionToken: []
        - AuthToken: []
      x-role:
        - admin
        - scanner
        - viewer
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Relation"
    x-swagger-router-controller: "relation.controller"
definitions:
  Project:
    type: "object"
    properties:
      id:
        type: "string"
        minLength: 1
      name:
        type: "string"
        minLength: 1
    required:
     - "id"
     - "name"
  Analysis:
    type: "object"
    properties:
      projectId:
        type: "string"
        minLength: 1
      branch:
        type: "string"
        minLength: 1
      version:
        type: "string"
        minLength: 1
    required:
     - "projectId"
     - "branch"
     - "version"
  Analyses:
    type: "array"
    items:
      $ref: "#/definitions/Analysis"
  Interaction:
    type: "object"
    properties:
      analysisId:
        type: "string"
        minLength: 24
        maxLength: 24
      provider:
        type: "string"
        minLength: 1
      flow:
        type: "string"
        minLength: 1
      request:
        $ref: "#/definitions/FlowRequest"
      response:
        $ref: "#/definitions/FlowResponse"
    required:
      - "analysisId"
      - "provider"
      - "flow"
      - "request"
      - "response"
  Flow:
    type: "object"
    properties:
      analysisId:
        type: "string"
        minLength: 24
        maxLength: 24
      name:
        type: "string"
        minLength: 1
      request:
        $ref: "#/definitions/FlowRequest"
      response:
        $ref: "#/definitions/FlowResponse"
    required:
     - "analysisId"
     - "name"
     - "request"
     - "response"
  FlowRequest:
    type: "object"
    properties:
      method:
        type: "string"
        minLength: 1
      path:
        type: "string"
        minLength: 1
      pathParams:
        type: "object"
      queryParams:
        type: "object"
      headers:
        type: "object"
      matchingRules:
        type: "object"
    required:
     - "method"
     - "path"
  FlowResponse:
    type: "object"
    properties:
      statusCode:
        type: "number"
      headers:
        type: "object"
      matchingRules:
        type: "object"
    required:
     - "statusCode"
  ProcessAnalysis:
    type: "object"
    properties:
      id:
        type: "string"
        minLength: 2
    required:
      - "id"
  SearchIds:
    type: "object"
    properties:
      ids:
        type: "array"
        items:
          type: "string"
    required:
      - "ids"
  Environment:
    type: "object"
    properties:
      projectId:
        type: "string"
        minLength: 1
      version:
        type: "string"
        minLength: 1
      environment:
        type: "string"
        minLength: 1
    required:
      - "projectId"
      - "version"
      - "environment"
  Verify:
    type: "object"
    properties:
      projectId:
        type: "string"
        minLength: 2
  Exception:
    type: "object"
    properties:
      flow:
        type: "string"
      error:
        type: "string"
  CompatibilityResult:
    type: "object"
    properties:
      consumer:
        type: "string"
      consumerVersion:
        type: "string"
      provider:
        type: "string"
      providerVersion:
        type: "string"
      status:
        type: "string"
      verifiedAt:
        type: "string"
      exceptions:
        type: "array"
        items:
          $ref: "#/definitions/Exception"
  QualityGateProjectStatus:
    type: "object"
    properties:
      name:
        type: "string"
      version:
        type: "string"
      status:
        type: "string"
      message:
        type: "string"
      exceptions:
        type: "array"
        items:
          $ref: "#/definitions/Exception"
  QualityGateStatus:
    type: "object"
    properties:
      environment:
        type: "string"
      status:
        type: "string"
      consumers:
        type: "array"
        items:
          $ref: "#/definitions/QualityGateProjectStatus"
      providers:
        type: "array"
        items:
          $ref: "#/definitions/QualityGateProjectStatus"
  Relation:
    type: "object"
    properties:
      projectId:
        type: "string"
      consumers:
        type: "array"
        items:
          type: "string"
      providers:
        type: "array"
        items:
          type: "string"
  HealthResponse:
    description: "Health Response"
    type: "object"
    properties:
      message:
        type: "string"
    example:
      message: "OK"
  Job:
    description: "Job Details"
    type: "object"
    properties:
      _id:
        type: "string"
      status:
        type: "string"
      message:
        type: "string"
      updatedAt:
        type: "string"
      projectId:
        type: "string"
  CompatibilityPayload:
    description: "Compatibility Payload"
    type: "object"
    properties:
      environments:
        type: "array"
        items:
          type: "string"
      flows:
        type: "array"
        items:
          $ref: "#/definitions/Flow"
      interactions:
        type: "array"
        items:
          $ref: "#/definitions/Interaction"
securityDefinitions:
  AuthToken:
    type: "apiKey"
    in: "header"
    name: "x-auth-token"
  SessionToken:
    type: apiKey
    in: header
    name: x-session-token